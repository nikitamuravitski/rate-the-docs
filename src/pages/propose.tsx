import { type NextPage } from "next";
import { useState } from "react";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import Header from "../components/common/Header";
import { trpc } from "../utils/trpc";
import styles from '../styles/gridPageLayout.module.css'
import { Proposal } from "../types/Proposal";

const Home: NextPage = () => {
  const [name, setName] = useState<string>('')
  const [description, setDescription] = useState<string>('')
  const [linkToDocs, setLinkToDocs] = useState<string>('')
  const [npmPackageName, setNpmPackageName] = useState<string>('')
  const [version, setVersion] = useState<string>('')
  const [message, setMessage] = useState<string>('')

  const createProposalMutation = trpc.proposals.createProposal.useMutation<Proposal>()
  const createProposalHandler = async () => {
    setMessage('')
    createProposalMutation.mutate({ name, description, linkToDocs, npmPackageName, version }, {
      onError: data => setMessage(data.message),
      onSuccess: data => {
        setMessage('success')
        setTimeout(() => setMessage(''), 5000)
      }
    });
  };
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles['wrapper']}>
        <Header />
        <div className="max-w-7xl w-full p-3 self-start flex justify-center">
          <form onSubmit={e => {
            e.preventDefault()
            createProposalHandler()
          }} className=" flex flex-col max-w-md w-full gap-5">
            <div className="flex w-full justify-between items-center text-white">
              <label htmlFor='nameForProposalInput'>Name</label>
              <input
                className="w-full max-w-xs rounded-md bg-[#ffffff29] border border-stone-700 p-3"
                required
                id='nameForProposalInput'
                type='text'
                value={name}
                onChange={e => setName(e.target.value)}
              />
            </div>
            <div className="flex w-full justify-between items-center text-white">
              <label htmlFor='descriptionForProposalInput'>Description</label>
              <textarea
                className="w-full max-w-xs rounded-md bg-[#ffffff29] border border-stone-700 p-3"
                required
                id='descriptionForProposalInput'
                value={description}
                onChange={e => setDescription(e.target.value)}
              />
            </div>
            <div className="flex w-full justify-between items-center text-white">
              <label htmlFor='currentVersionForProposalInput' >Link to docs</label>
              <input
                className="w-full max-w-xs rounded-md bg-[#ffffff29] border border-stone-700 p-3"
                required
                id='currentVersionForProposalInput'
                type='text'
                value={linkToDocs}
                onChange={e => setLinkToDocs(e.target.value)}
              />
            </div>
            <div className="flex w-full justify-between items-center text-white">
              <label htmlFor='currentVersionForProposalInput' >NPM package name</label>
              <input
                className="w-full max-w-xs rounded-md bg-[#ffffff29] border border-stone-700 p-3"
                required
                id='currentVersionForProposalInput'
                type='text'
                value={npmPackageName}
                onChange={e => setNpmPackageName(e.target.value)}
              />
            </div>
            <div className="flex w-full justify-between items-center text-white">
              <label htmlFor='currentVersionForProposalInput' >Version</label>
              <input
                className="w-full max-w-xs rounded-md bg-[#ffffff29] border border-stone-700 p-3"
                required
                id='currentVersionForProposalInput'
                type='text'
                value={version}
                onChange={e => setVersion(e.target.value)}
              />
            </div>
            <button type="submit" className="text-white font-semibold text-lg py-2 px-5 bg-gradient-to-r from-purple-400 to-pink-600  rounded-lg w-fit">Submit</button>
          <div className="text-white">{message}</div>
          </form>
        </div>
      </main>
    </>
  );
};

export default Home;
