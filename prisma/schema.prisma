// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {

  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role?     @default(user)
  accounts      Account[]
  sessions      Session[]
  Rating        Rating[]
  Vote          Vote[]
}

enum Role {
  admin
  user
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Documentation {
  id              String                   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  linkToDocs      String
  linkToRepo      String
  packageName     String
  versionRange    Int[]
  status          DocumentationStatus      @default(voting)
  ratings         Rating[]
  votes           Vote[]
  language        ForWhatLanguage
  ratingSummary   RatingSummary?
  voteSummary     VotesSummary?
  ratingByVersion RatingSummaryByVersion[]
}

model RatingSummary {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  avg             Float
  total           Int
  one             Int
  two             Int
  three           Int
  four            Int
  five            Int
  documentation   Documentation @relation(fields: [documentationId], references: [id])
  documentationId String        @unique @db.ObjectId
  ratings         Rating[]
}

model RatingSummaryByVersion {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  majorVersion    Int
  avg             Float
  total           Int
  one             Int
  two             Int
  three           Int
  four            Int
  five            Int
  documentation   Documentation @relation(fields: [documentationId], references: [id])
  documentationId String        @db.ObjectId
  ratings         Rating[]
}

model VotesSummary {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  total           Int
  documentation   Documentation @relation(fields: [documentationId], references: [id])
  documentationId String        @unique @db.ObjectId
  votes           Vote[]
}

model Rating {
  id                       String                  @id @default(auto()) @map("_id") @db.ObjectId
  documentationVersion     Int
  value                    Int
  user                     User                    @relation(fields: [userId], references: [id])
  userId                   String                  @db.ObjectId
  ratingSummary            RatingSummary?          @relation(fields: [documentationId], references: [documentationId])
  documentation            Documentation?          @relation(fields: [documentationId], references: [id])
  ratingSummaryByVersion   RatingSummaryByVersion? @relation(fields: [ratingSummaryByVersionId], references: [id])
  ratingSummaryByVersionId String?                 @db.ObjectId
  documentationId          String?                 @db.ObjectId
}

model Vote {
  id                       String        @id @default(auto()) @map("_id") @db.ObjectId
  value                    Int
  user                     User          @relation(fields: [userId], references: [id])
  userId                   String        @db.ObjectId
  documentation            Documentation @relation(fields: [documentationId], references: [id])
  documentationId          String        @db.ObjectId
  votesSummary             VotesSummary? @relation(fields: [documentationWithVotesId], references: [id])
  documentationWithVotesId String?       @db.ObjectId
}

enum DocumentationStatus {
  voting
  declined
  accepted
}

enum ForWhatLanguage {
  javascript
  java
  rust
  python
}
