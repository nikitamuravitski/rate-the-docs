// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Rating        Rating[]
  Vote          Vote[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Documentation {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  linkToDocs  String
  packageName String
  docVersion  String
  status      DocumentationStatus @default(voting)
  ratings     Rating[]
  votes       Vote[]
  language    ForWhatLanguage
}

model Rating {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  value           Int
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @db.ObjectId
  documentation   Documentation @relation(fields: [documentationId], references: [id])
  documentationId String        @db.ObjectId
}

model Vote {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  value           Int
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @db.ObjectId
  documentation   Documentation @relation(fields: [documentationId], references: [id])
  documentationId String        @db.ObjectId
}

enum DocumentationStatus {
  voting
  declined
  accepted
}

enum ForWhatLanguage {
  javascript
  java
  rust
  python
}
